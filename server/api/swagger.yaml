---
swagger: "2.0"
info:
  description: "This is an example of using OAuth2 Password Flow in a specification\
    \ to describe security to your API."
  version: "1.0.0"
  title: "Sample Password Flow OAuth2 Project"
host: "virtserver.swaggerhub.com"
basePath: "/EnglishTester/etest/1.0.0"
schemes:
- "https"
security:
- basicAuth: []
paths:
  /example:
    get:
      summary: "Server example operation"
      description: "This is an example opeartion to show how security is applied to\
        \ the call."
      parameters: []
      responses:
        200:
          description: "OK"
        400:
          description: "BAD REQ"
  /ping:
    get:
      summary: "Server heartbeat operation"
      description: "This operation shows how to override the global security defined\
        \ above, as we want to open it up for all users."
      parameters: []
      responses:
        200:
          description: "OK"
      security: []
  /students:
    get:
      summary: "Return list of all students in session"
      description: "Return list of all students from DB"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
    delete:
      summary: "Deletes all students in session"
      description: "This operation deletes all students from db"
      parameters: []
      responses:
        200:
          description: "OK"
        400:
          description: "Error on user-side. Bad Request."
        500:
          description: "Error on server-side."
  /student:
    post:
      summary: "Create one student"
      description: "Create one student and save in db. Returns created user data."
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object. ID could be whatever. Would be overriden."
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Student"
    put:
      summary: "Update student data"
      description: "Find student by ID and update data as in body"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student to be updated"
        required: true
        schema:
          $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
        404:
          description: "User not found"
        500:
          description: "Server-side error"
  /student/createWithArray:
    post:
      summary: "Create list of students with given array"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Array of students"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Student"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK. List of Students"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
        400:
          description: "Bad Request"
        500:
          description: "Server-side error"
  /test:
    post:
      summary: "Add test to tests"
      description: "Add test to tests in DB. Require json of Test object"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Test"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request. Bad test file."
        500:
          description: "Server side error"
    put:
      summary: "Update test"
      description: "Update test in DB. Require old test-json and new"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Test"
        x-exportParamName: "Body"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request. Bad Test file."
        500:
          description: "Server side error."
  /audio/{studentId}:
    get:
      summary: "Return audio attached to Student"
      description: "Return audio attached to Student if exist"
      produces:
      - "audio/mpeg"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
    post:
      summary: "Attach audio to student"
      description: "Attach audio file to Student by id"
      consumes:
      - "application/x-www-form-urlencoded"
      - "multipart/form-data"
      parameters:
      - name: "studentId"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "StudentId"
      - name: "upfile"
        in: "formData"
        description: "The file to upload."
        required: false
        type: "file"
        x-exportParamName: "Upfile"
      responses:
        200:
          description: "OK"
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
    example:
      lastName: "lastName"
      password: "password"
      id: 0
      email: "email"
  Test:
    type: "object"
